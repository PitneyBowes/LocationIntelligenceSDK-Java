/**
 * Location Intelligence APIs
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 8.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package pb.locationintelligence;

import pb.ApiException;
import pb.locationintelligence.model.IntersectionResponse;
import pb.locationintelligence.model.SpeedLimit;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LIAPIGeoStreetsServiceApi
 */
public class LIAPIGeoStreetsServiceApiTest {

    private final LIAPIGeoStreetsServiceApi api = new LIAPIGeoStreetsServiceApi();

    
    /**
     * Gets NearestIntersection of major roads
     *
     * Gets NearestIntersection of major roads
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIntersectionByAddressTest() throws ApiException {
        String address = null;
        String roadClass = null;
        String driveTime = null;
        String driveTimeUnit = null;
        String searchRadius = null;
        String searchRadiusUnit = null;
        String historicSpeed = null;
        String maxCandidates = null;
        // IntersectionResponse response = api.getIntersectionByAddress(address, roadClass, driveTime, driveTimeUnit, searchRadius, searchRadiusUnit, historicSpeed, maxCandidates);

        // TODO: test validations
    }
    
    /**
     * Gets NearestIntersection of major roads
     *
     * Gets NearestIntersection of major roads
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIntersectionByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String roadClass = null;
        String driveTime = null;
        String driveTimeUnit = null;
        String searchRadius = null;
        String searchRadiusUnit = null;
        String historicSpeed = null;
        String maxCandidates = null;
        // IntersectionResponse response = api.getIntersectionByLocation(longitude, latitude, roadClass, driveTime, driveTimeUnit, searchRadius, searchRadiusUnit, historicSpeed, maxCandidates);

        // TODO: test validations
    }
    
    /**
     * Gets NearestSpeedLimit
     *
     * GetNearestSpeedLimit Endpoint will take point coordinates of a path and will return the posted speed limit of the road segment on which this path will snap.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNearestSpeedLimitTest() throws ApiException {
        String path = null;
        // SpeedLimit response = api.getNearestSpeedLimit(path);

        // TODO: test validations
    }
    
}
