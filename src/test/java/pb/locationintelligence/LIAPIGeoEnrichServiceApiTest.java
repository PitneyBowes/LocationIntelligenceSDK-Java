/**
 * Location Intelligence APIs
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package pb.locationintelligence;

import pb.ApiException;
import pb.locationintelligence.model.GeoEnrichMetadataResponse;
import pb.locationintelligence.model.GeoEnrichResponse;
import pb.locationintelligence.model.PlaceByLocations;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LIAPIGeoEnrichServiceApi
 */
public class LIAPIGeoEnrichServiceApiTest {

    private final LIAPIGeoEnrichServiceApi api = new LIAPIGeoEnrichServiceApi();

    
    /**
     * Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping
     *
     * Accepts first partial digits or full category codes to filter the response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCategoryCodeMetadataTest() throws ApiException {
        String categoryCode = null;
        // GeoEnrichMetadataResponse response = api.getCategoryCodeMetadata(categoryCode);

        // TODO: test validations
    }
    
    /**
     * Point of Interests By Address.
     *
     * Accepts address as an input to retrieve nearby point of interests.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPOIsByAddressTest() throws ApiException {
        String address = null;
        String country = null;
        String name = null;
        String type = null;
        String categoryCode = null;
        String sicCode = null;
        String maxCandidates = null;
        String searchRadius = null;
        String searchRadiusUnit = null;
        String travelTime = null;
        String travelTimeUnit = null;
        String travelDistance = null;
        String travelDistanceUnit = null;
        String travelMode = null;
        String sortBy = null;
        // GeoEnrichResponse response = api.getPOIsByAddress(address, country, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy);

        // TODO: test validations
    }
    
    /**
     * Point of Interests By Location.
     *
     * Accepts longitude and latitude as an input to retrieve nearby point of interests.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPOIsByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String name = null;
        String type = null;
        String categoryCode = null;
        String sicCode = null;
        String maxCandidates = null;
        String searchRadius = null;
        String searchRadiusUnit = null;
        String travelTime = null;
        String travelTimeUnit = null;
        String travelDistance = null;
        String travelDistanceUnit = null;
        String travelMode = null;
        String sortBy = null;
        // GeoEnrichResponse response = api.getPOIsByLocation(longitude, latitude, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy);

        // TODO: test validations
    }
    
    /**
     * Place By Location.
     *
     * Identifies and retrieves the nearest neighborhood around a specific location. This GeoEnrich service accepts latitude &amp; longitude as input and returns a place name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String levelHint = null;
        // PlaceByLocations response = api.getPlaceByLocation(longitude, latitude, levelHint);

        // TODO: test validations
    }
    
    /**
     * Returns SIC Codes with their Industry Titles and Category Codes mapping
     *
     * Accepts first few partial digits or full SIC codes to filter the response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSICMetadataTest() throws ApiException {
        String sicCode = null;
        // GeoEnrichMetadataResponse response = api.getSICMetadata(sicCode);

        // TODO: test validations
    }
    
}
