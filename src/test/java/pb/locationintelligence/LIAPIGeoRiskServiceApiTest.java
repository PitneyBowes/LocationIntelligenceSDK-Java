/**
 * Location Intelligence APIs
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 6.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package pb.locationintelligence;

import pb.ApiException;
import pb.locationintelligence.model.CrimeRiskResponse;
import pb.locationintelligence.model.CrimeRiskByAddressRequest;
import pb.locationintelligence.model.CrimeRiskResponseList;
import pb.locationintelligence.model.CrimeRiskLocationResponse;
import pb.locationintelligence.model.CrimeRiskByLocationRequest;
import pb.locationintelligence.model.CrimeRiskLocationResponseList;
import pb.locationintelligence.model.WaterBodyResponse;
import pb.locationintelligence.model.DistanceToFloodHazardResponse;
import pb.locationintelligence.model.DistanceToFloodHazardAddressRequest;
import pb.locationintelligence.model.WaterBodyLocationResponse;
import pb.locationintelligence.model.DistanceToFloodHazardLocationResponse;
import pb.locationintelligence.model.DistanceToFloodHazardLocationRequest;
import pb.locationintelligence.model.EarthquakeHistory;
import pb.locationintelligence.model.EarthquakeRiskResponse;
import pb.locationintelligence.model.EarthquakeRiskByAddressRequest;
import pb.locationintelligence.model.EarthquakeRiskResponseList;
import pb.locationintelligence.model.EarthquakeRiskLocationResponse;
import pb.locationintelligence.model.EarthquakeRiskLocationResponseList;
import pb.locationintelligence.model.EarthquakeRiskByLocationRequest;
import pb.locationintelligence.model.FireHistory;
import pb.locationintelligence.model.FireRiskResponse;
import pb.locationintelligence.model.FireRiskByAddressRequest;
import pb.locationintelligence.model.FireRiskResponseList;
import pb.locationintelligence.model.FireRiskLocationResponse;
import pb.locationintelligence.model.FireRiskLocationResponseList;
import pb.locationintelligence.model.FireRiskByLocationRequest;
import pb.locationintelligence.model.FireStations;
import pb.locationintelligence.model.FireStationsLocation;
import pb.locationintelligence.model.FloodRiskResponse;
import pb.locationintelligence.model.FloodRiskByAddressRequest;
import pb.locationintelligence.model.FloodRiskResponseList;
import pb.locationintelligence.model.FloodRiskLocationResponse;
import pb.locationintelligence.model.FloodRiskByLocationRequest;
import pb.locationintelligence.model.FloodRiskLocationResponseList;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LIAPIGeoRiskServiceApi
 */
public class LIAPIGeoRiskServiceApiTest {

    private final LIAPIGeoRiskServiceApi api = new LIAPIGeoRiskServiceApi();

    
    /**
     * Gets CrimeRiskResponse
     *
     * Returns the crime data or crime indexes for a given address input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCrimeRiskByAddressTest() throws ApiException {
        String address = null;
        String type = null;
        String includeGeometry = null;
        // CrimeRiskResponse response = api.getCrimeRiskByAddress(address, type, includeGeometry);

        // TODO: test validations
    }
    
    /**
     * Batch method for getting crime risk by address
     *
     * Batch method for getting crime risk by address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCrimeRiskByAddressBatchTest() throws ApiException {
        CrimeRiskByAddressRequest body = null;
        // CrimeRiskResponseList response = api.getCrimeRiskByAddressBatch(body);

        // TODO: test validations
    }
    
    /**
     * Gets CrimeRiskResponse
     *
     * Returns the crime data or crime indexes for a given location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCrimeRiskByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String type = null;
        String includeGeometry = null;
        // CrimeRiskLocationResponse response = api.getCrimeRiskByLocation(longitude, latitude, type, includeGeometry);

        // TODO: test validations
    }
    
    /**
     * Batch method for getting crime risk by location
     *
     * Batch method for getting crime risk by location
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCrimeRiskByLocationBatchTest() throws ApiException {
        CrimeRiskByLocationRequest body = null;
        // CrimeRiskLocationResponseList response = api.getCrimeRiskByLocationBatch(body);

        // TODO: test validations
    }
    
    /**
     * Gets WaterBodyResponse
     *
     * Gets WaterBodyResponse
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistanceToFloodHazardByAddressTest() throws ApiException {
        String address = null;
        String maxCandidates = null;
        String waterBodyType = null;
        String searchDistance = null;
        String searchDistanceUnit = null;
        // WaterBodyResponse response = api.getDistanceToFloodHazardByAddress(address, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit);

        // TODO: test validations
    }
    
    /**
     * Batch method for getting Water Bodies by address
     *
     * Batch method for getting Water Bodies by address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistanceToFloodHazardByAddressBatchTest() throws ApiException {
        DistanceToFloodHazardAddressRequest body = null;
        // DistanceToFloodHazardResponse response = api.getDistanceToFloodHazardByAddressBatch(body);

        // TODO: test validations
    }
    
    /**
     * Gets WaterBodyResponse
     *
     * Gets WaterBodyResponse
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistanceToFloodHazardByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String maxCandidates = null;
        String waterBodyType = null;
        String searchDistance = null;
        String searchDistanceUnit = null;
        // WaterBodyLocationResponse response = api.getDistanceToFloodHazardByLocation(longitude, latitude, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit);

        // TODO: test validations
    }
    
    /**
     * Batch method for getting Water Bodies by location
     *
     * Batch method for getting Water Bodies by location
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistanceToFloodHazardByLocationBatchTest() throws ApiException {
        DistanceToFloodHazardLocationRequest body = null;
        // DistanceToFloodHazardLocationResponse response = api.getDistanceToFloodHazardByLocationBatch(body);

        // TODO: test validations
    }
    
    /**
     * Gets EarthquakeHistory
     *
     * Gets EarthquakeHistory
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEarthquakeHistoryTest() throws ApiException {
        String postCode = null;
        String startDate = null;
        String endDate = null;
        String minMagnitude = null;
        String maxMagnitude = null;
        String maxCandidates = null;
        // EarthquakeHistory response = api.getEarthquakeHistory(postCode, startDate, endDate, minMagnitude, maxMagnitude, maxCandidates);

        // TODO: test validations
    }
    
    /**
     * Gets EarthquakeRiskResponse
     *
     * Returns the count of earthquake events for various richter measurements and values for an input address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEarthquakeRiskByAddressTest() throws ApiException {
        String address = null;
        String richterValue = null;
        String includeGeometry = null;
        // EarthquakeRiskResponse response = api.getEarthquakeRiskByAddress(address, richterValue, includeGeometry);

        // TODO: test validations
    }
    
    /**
     * Batch method for getting earthquake risk by address
     *
     * Batch method for getting earthquake risk by address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEarthquakeRiskByAddressBatchTest() throws ApiException {
        EarthquakeRiskByAddressRequest body = null;
        // EarthquakeRiskResponseList response = api.getEarthquakeRiskByAddressBatch(body);

        // TODO: test validations
    }
    
    /**
     * Gets EarthquakeRiskResponse
     *
     * Gets EarthquakeRiskResponse
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEarthquakeRiskByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String richterValue = null;
        String includeGeometry = null;
        // EarthquakeRiskLocationResponse response = api.getEarthquakeRiskByLocation(longitude, latitude, richterValue, includeGeometry);

        // TODO: test validations
    }
    
    /**
     * Batch method for getting earthquake risk by location
     *
     * Batch method for getting earthquake risk by location
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEarthquakeRiskByLocationBatchTest() throws ApiException {
        EarthquakeRiskByLocationRequest body = null;
        // EarthquakeRiskLocationResponseList response = api.getEarthquakeRiskByLocationBatch(body);

        // TODO: test validations
    }
    
    /**
     * Gets FireHistory
     *
     * Gets FireHistory
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFireHistoryTest() throws ApiException {
        String postCode = null;
        String startDate = null;
        String endDate = null;
        String maxCandidates = null;
        // FireHistory response = api.getFireHistory(postCode, startDate, endDate, maxCandidates);

        // TODO: test validations
    }
    
    /**
     * Gets FireRiskResponse
     *
     * Returns the fire data based on address input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFireRiskByAddressTest() throws ApiException {
        String address = null;
        // FireRiskResponse response = api.getFireRiskByAddress(address);

        // TODO: test validations
    }
    
    /**
     * Batch method for getting fire risk by address
     *
     * Batch method for getting fire risk by address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFireRiskByAddressBatchTest() throws ApiException {
        FireRiskByAddressRequest body = null;
        // FireRiskResponseList response = api.getFireRiskByAddressBatch(body);

        // TODO: test validations
    }
    
    /**
     * Gets FireRiskResponse
     *
     * Returns the fire data based on location input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFireRiskByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        // FireRiskLocationResponse response = api.getFireRiskByLocation(longitude, latitude);

        // TODO: test validations
    }
    
    /**
     * Batch method for getting fire risk by location
     *
     * Batch method for getting fire risk by location
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFireRiskByLocationBatchTest() throws ApiException {
        FireRiskByLocationRequest body = null;
        // FireRiskLocationResponseList response = api.getFireRiskByLocationBatch(body);

        // TODO: test validations
    }
    
    /**
     * Gets FireStationResponse
     *
     * Returns the nearest Firestations from an input address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFireStationByAddressTest() throws ApiException {
        String address = null;
        String maxCandidates = null;
        String travelTime = null;
        String travelTimeUnit = null;
        String travelDistance = null;
        String travelDistanceUnit = null;
        String sortBy = null;
        String historicTrafficTimeBucket = null;
        // FireStations response = api.getFireStationByAddress(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, historicTrafficTimeBucket);

        // TODO: test validations
    }
    
    /**
     * Gets FireStationResponse
     *
     * Returns the nearest Firestations from an input location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFireStationByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String maxCandidates = null;
        String travelTime = null;
        String travelTimeUnit = null;
        String travelDistance = null;
        String travelDistanceUnit = null;
        String sortBy = null;
        String historicTrafficTimeBucket = null;
        // FireStationsLocation response = api.getFireStationByLocation(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, historicTrafficTimeBucket);

        // TODO: test validations
    }
    
    /**
     * Gets FloodRiskResponse
     *
     * Returns the Flood Risk data for flood zones based on an address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFloodRiskByAddressTest() throws ApiException {
        String address = null;
        String includeZoneDesc = null;
        String includeGeometry = null;
        // FloodRiskResponse response = api.getFloodRiskByAddress(address, includeZoneDesc, includeGeometry);

        // TODO: test validations
    }
    
    /**
     * Batch method for getting flood risk by address
     *
     * Batch method for getting flood risk by address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFloodRiskByAddressBatchTest() throws ApiException {
        FloodRiskByAddressRequest body = null;
        // FloodRiskResponseList response = api.getFloodRiskByAddressBatch(body);

        // TODO: test validations
    }
    
    /**
     * Gets FloodRiskResponse
     *
     * Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFloodRiskByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String includeZoneDesc = null;
        String includeGeometry = null;
        // FloodRiskLocationResponse response = api.getFloodRiskByLocation(longitude, latitude, includeZoneDesc, includeGeometry);

        // TODO: test validations
    }
    
    /**
     * Batch method for getting flood risk by location
     *
     * Batch method for getting flood risk by location
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFloodRiskByLocationBatchTest() throws ApiException {
        FloodRiskByLocationRequest body = null;
        // FloodRiskLocationResponseList response = api.getFloodRiskByLocationBatch(body);

        // TODO: test validations
    }
    
}
