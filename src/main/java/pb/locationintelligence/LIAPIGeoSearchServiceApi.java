/**
 * Location Intelligence APIs
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 8.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package pb.locationintelligence;

import pb.ApiCallback;
import pb.ApiClient;
import pb.ApiException;
import pb.ApiResponse;
import pb.Configuration;
import pb.Pair;
import pb.ProgressRequestBody;
import pb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import pb.locationintelligence.model.GeosearchLocations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LIAPIGeoSearchServiceApi {
    private ApiClient apiClient;

    public LIAPIGeoSearchServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LIAPIGeoSearchServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for geoSearch */
    private com.squareup.okhttp.Call geoSearchCall(String searchText, String latitude, String longitude, String searchRadius, String searchRadiusUnit, String maxCandidates, String country, String matchOnAddressNumber, String autoDetectLocation, String ipAddress, String areaName1, String areaName3, String postCode, String returnAdminAreasOnly, String includeRangesDetails, String searchType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'searchText' is set
        if (searchText == null) {
            throw new ApiException("Missing the required parameter 'searchText' when calling geoSearch(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geosearch/v2/locations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (searchText != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchText", searchText));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (searchRadius != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchRadius", searchRadius));
        if (searchRadiusUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchRadiusUnit", searchRadiusUnit));
        if (maxCandidates != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxCandidates", maxCandidates));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "country", country));
        if (matchOnAddressNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchOnAddressNumber", matchOnAddressNumber));
        if (autoDetectLocation != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "autoDetectLocation", autoDetectLocation));
        if (ipAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ipAddress", ipAddress));
        if (areaName1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "areaName1", areaName1));
        if (areaName3 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "areaName3", areaName3));
        if (postCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "postCode", postCode));
        if (returnAdminAreasOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "returnAdminAreasOnly", returnAdminAreasOnly));
        if (includeRangesDetails != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeRangesDetails", includeRangesDetails));
        if (searchType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchType", searchType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets LocationList
     * Gets LocationList
     * @param searchText The input to be searched. (required)
     * @param latitude Latitude of the location. Either the latitude or the longitude must be provided. (optional)
     * @param longitude Longitude of the location. Either the latitude or the longitude must be provided. (optional)
     * @param searchRadius Radius range within which search is performed. (optional)
     * @param searchRadiusUnit Radius unit such as Feet, Kilometers, Miles or Meters. (optional)
     * @param maxCandidates Maximum number of addresses that can be retrieved. (optional)
     * @param country Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param matchOnAddressNumber Option so that we force api to match on address number (optional)
     * @param autoDetectLocation Option to allow API to detect origin of API request automatically (optional, default to true)
     * @param ipAddress  (optional)
     * @param areaName1 State province of the input to be searched (optional)
     * @param areaName3 City of the input to be searched (optional)
     * @param postCode Postal Code of the input to be searched (optional)
     * @param returnAdminAreasOnly if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional, default to N)
     * @param includeRangesDetails if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional, default to Y)
     * @param searchType Preference to control search type of interactive requests. (optional, default to ADDRESS)
     * @return GeosearchLocations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeosearchLocations geoSearch(String searchText, String latitude, String longitude, String searchRadius, String searchRadiusUnit, String maxCandidates, String country, String matchOnAddressNumber, String autoDetectLocation, String ipAddress, String areaName1, String areaName3, String postCode, String returnAdminAreasOnly, String includeRangesDetails, String searchType) throws ApiException {
        ApiResponse<GeosearchLocations> resp = geoSearchWithHttpInfo(searchText, latitude, longitude, searchRadius, searchRadiusUnit, maxCandidates, country, matchOnAddressNumber, autoDetectLocation, ipAddress, areaName1, areaName3, postCode, returnAdminAreasOnly, includeRangesDetails, searchType);
        return resp.getData();
    }

    /**
     * Gets LocationList
     * Gets LocationList
     * @param searchText The input to be searched. (required)
     * @param latitude Latitude of the location. Either the latitude or the longitude must be provided. (optional)
     * @param longitude Longitude of the location. Either the latitude or the longitude must be provided. (optional)
     * @param searchRadius Radius range within which search is performed. (optional)
     * @param searchRadiusUnit Radius unit such as Feet, Kilometers, Miles or Meters. (optional)
     * @param maxCandidates Maximum number of addresses that can be retrieved. (optional)
     * @param country Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param matchOnAddressNumber Option so that we force api to match on address number (optional)
     * @param autoDetectLocation Option to allow API to detect origin of API request automatically (optional, default to true)
     * @param ipAddress  (optional)
     * @param areaName1 State province of the input to be searched (optional)
     * @param areaName3 City of the input to be searched (optional)
     * @param postCode Postal Code of the input to be searched (optional)
     * @param returnAdminAreasOnly if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional, default to N)
     * @param includeRangesDetails if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional, default to Y)
     * @param searchType Preference to control search type of interactive requests. (optional, default to ADDRESS)
     * @return ApiResponse&lt;GeosearchLocations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeosearchLocations> geoSearchWithHttpInfo(String searchText, String latitude, String longitude, String searchRadius, String searchRadiusUnit, String maxCandidates, String country, String matchOnAddressNumber, String autoDetectLocation, String ipAddress, String areaName1, String areaName3, String postCode, String returnAdminAreasOnly, String includeRangesDetails, String searchType) throws ApiException {
        com.squareup.okhttp.Call call = geoSearchCall(searchText, latitude, longitude, searchRadius, searchRadiusUnit, maxCandidates, country, matchOnAddressNumber, autoDetectLocation, ipAddress, areaName1, areaName3, postCode, returnAdminAreasOnly, includeRangesDetails, searchType, null, null);
        Type localVarReturnType = new TypeToken<GeosearchLocations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets LocationList (asynchronously)
     * Gets LocationList
     * @param searchText The input to be searched. (required)
     * @param latitude Latitude of the location. Either the latitude or the longitude must be provided. (optional)
     * @param longitude Longitude of the location. Either the latitude or the longitude must be provided. (optional)
     * @param searchRadius Radius range within which search is performed. (optional)
     * @param searchRadiusUnit Radius unit such as Feet, Kilometers, Miles or Meters. (optional)
     * @param maxCandidates Maximum number of addresses that can be retrieved. (optional)
     * @param country Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)
     * @param matchOnAddressNumber Option so that we force api to match on address number (optional)
     * @param autoDetectLocation Option to allow API to detect origin of API request automatically (optional, default to true)
     * @param ipAddress  (optional)
     * @param areaName1 State province of the input to be searched (optional)
     * @param areaName3 City of the input to be searched (optional)
     * @param postCode Postal Code of the input to be searched (optional)
     * @param returnAdminAreasOnly if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional, default to N)
     * @param includeRangesDetails if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional, default to Y)
     * @param searchType Preference to control search type of interactive requests. (optional, default to ADDRESS)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call geoSearchAsync(String searchText, String latitude, String longitude, String searchRadius, String searchRadiusUnit, String maxCandidates, String country, String matchOnAddressNumber, String autoDetectLocation, String ipAddress, String areaName1, String areaName3, String postCode, String returnAdminAreasOnly, String includeRangesDetails, String searchType, final ApiCallback<GeosearchLocations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = geoSearchCall(searchText, latitude, longitude, searchRadius, searchRadiusUnit, maxCandidates, country, matchOnAddressNumber, autoDetectLocation, ipAddress, areaName1, areaName3, postCode, returnAdminAreasOnly, includeRangesDetails, searchType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeosearchLocations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
