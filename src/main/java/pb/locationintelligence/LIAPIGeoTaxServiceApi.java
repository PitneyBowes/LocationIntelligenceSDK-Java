/**
 * Location Intelligence APIs
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 6.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package pb.locationintelligence;

import pb.ApiCallback;
import pb.ApiClient;
import pb.ApiException;
import pb.ApiResponse;
import pb.Configuration;
import pb.Pair;
import pb.ProgressRequestBody;
import pb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import pb.locationintelligence.model.TaxAddressRequest;
import pb.locationintelligence.model.TaxResponses;
import pb.locationintelligence.model.TaxLocationRequest;
import pb.locationintelligence.model.TaxLocationResponses;
import pb.locationintelligence.model.TaxRateResponses;
import pb.locationintelligence.model.TaxRateAddressRequest;
import pb.locationintelligence.model.TaxRateLocationResponses;
import pb.locationintelligence.model.TaxRateLocationRequest;
import pb.locationintelligence.model.TaxDistrictResponse;
import pb.locationintelligence.model.TaxDistrictResponseList;
import pb.locationintelligence.model.IPDTaxByAddressBatchRequest;
import pb.locationintelligence.model.TaxResponse;
import pb.locationintelligence.model.TaxRateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LIAPIGeoTaxServiceApi {
    private ApiClient apiClient;

    public LIAPIGeoTaxServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LIAPIGeoTaxServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getBatchTaxByAddress */
    private com.squareup.okhttp.Call getBatchTaxByAddressCall(String taxRateTypeId, TaxAddressRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'taxRateTypeId' is set
        if (taxRateTypeId == null) {
            throw new ApiException("Missing the required parameter 'taxRateTypeId' when calling getBatchTaxByAddress(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getBatchTaxByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geotax/v1/tax/{taxRateTypeId}/byaddress".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taxRateTypeId" + "\\}", apiClient.escapeString(taxRateTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Post Tax By Address
     * This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxAddressRequest Class Object having tax request. (required)
     * @return TaxResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxResponses getBatchTaxByAddress(String taxRateTypeId, TaxAddressRequest body) throws ApiException {
        ApiResponse<TaxResponses> resp = getBatchTaxByAddressWithHttpInfo(taxRateTypeId, body);
        return resp.getData();
    }

    /**
     * Post Tax By Address
     * This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxAddressRequest Class Object having tax request. (required)
     * @return ApiResponse&lt;TaxResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxResponses> getBatchTaxByAddressWithHttpInfo(String taxRateTypeId, TaxAddressRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getBatchTaxByAddressCall(taxRateTypeId, body, null, null);
        Type localVarReturnType = new TypeToken<TaxResponses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post Tax By Address (asynchronously)
     * This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxAddressRequest Class Object having tax request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBatchTaxByAddressAsync(String taxRateTypeId, TaxAddressRequest body, final ApiCallback<TaxResponses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBatchTaxByAddressCall(taxRateTypeId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxResponses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBatchTaxByLocation */
    private com.squareup.okhttp.Call getBatchTaxByLocationCall(String taxRateTypeId, TaxLocationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'taxRateTypeId' is set
        if (taxRateTypeId == null) {
            throw new ApiException("Missing the required parameter 'taxRateTypeId' when calling getBatchTaxByLocation(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getBatchTaxByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geotax/v1/tax/{taxRateTypeId}/bylocation".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taxRateTypeId" + "\\}", apiClient.escapeString(taxRateTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Post Tax By Location
     * This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxAddressRequest Class Object having tax request. (required)
     * @return TaxLocationResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxLocationResponses getBatchTaxByLocation(String taxRateTypeId, TaxLocationRequest body) throws ApiException {
        ApiResponse<TaxLocationResponses> resp = getBatchTaxByLocationWithHttpInfo(taxRateTypeId, body);
        return resp.getData();
    }

    /**
     * Post Tax By Location
     * This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxAddressRequest Class Object having tax request. (required)
     * @return ApiResponse&lt;TaxLocationResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxLocationResponses> getBatchTaxByLocationWithHttpInfo(String taxRateTypeId, TaxLocationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getBatchTaxByLocationCall(taxRateTypeId, body, null, null);
        Type localVarReturnType = new TypeToken<TaxLocationResponses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post Tax By Location (asynchronously)
     * This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxAddressRequest Class Object having tax request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBatchTaxByLocationAsync(String taxRateTypeId, TaxLocationRequest body, final ApiCallback<TaxLocationResponses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBatchTaxByLocationCall(taxRateTypeId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxLocationResponses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBatchTaxRateByAddress */
    private com.squareup.okhttp.Call getBatchTaxRateByAddressCall(String taxRateTypeId, TaxRateAddressRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'taxRateTypeId' is set
        if (taxRateTypeId == null) {
            throw new ApiException("Missing the required parameter 'taxRateTypeId' when calling getBatchTaxRateByAddress(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getBatchTaxRateByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/byaddress".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taxRateTypeId" + "\\}", apiClient.escapeString(taxRateTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Post Taxrate By Address
     * This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxRateAddressRequest Class Object having tax rate request. (required)
     * @return TaxRateResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxRateResponses getBatchTaxRateByAddress(String taxRateTypeId, TaxRateAddressRequest body) throws ApiException {
        ApiResponse<TaxRateResponses> resp = getBatchTaxRateByAddressWithHttpInfo(taxRateTypeId, body);
        return resp.getData();
    }

    /**
     * Post Taxrate By Address
     * This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxRateAddressRequest Class Object having tax rate request. (required)
     * @return ApiResponse&lt;TaxRateResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxRateResponses> getBatchTaxRateByAddressWithHttpInfo(String taxRateTypeId, TaxRateAddressRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getBatchTaxRateByAddressCall(taxRateTypeId, body, null, null);
        Type localVarReturnType = new TypeToken<TaxRateResponses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post Taxrate By Address (asynchronously)
     * This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxRateAddressRequest Class Object having tax rate request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBatchTaxRateByAddressAsync(String taxRateTypeId, TaxRateAddressRequest body, final ApiCallback<TaxRateResponses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBatchTaxRateByAddressCall(taxRateTypeId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxRateResponses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBatchTaxRateByLocation */
    private com.squareup.okhttp.Call getBatchTaxRateByLocationCall(String taxRateTypeId, TaxRateLocationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'taxRateTypeId' is set
        if (taxRateTypeId == null) {
            throw new ApiException("Missing the required parameter 'taxRateTypeId' when calling getBatchTaxRateByLocation(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getBatchTaxRateByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/bylocation".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taxRateTypeId" + "\\}", apiClient.escapeString(taxRateTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Post Taxrate By Location
     * This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxRateLocationRequest Class Object having tax rate request. (required)
     * @return TaxRateLocationResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxRateLocationResponses getBatchTaxRateByLocation(String taxRateTypeId, TaxRateLocationRequest body) throws ApiException {
        ApiResponse<TaxRateLocationResponses> resp = getBatchTaxRateByLocationWithHttpInfo(taxRateTypeId, body);
        return resp.getData();
    }

    /**
     * Post Taxrate By Location
     * This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxRateLocationRequest Class Object having tax rate request. (required)
     * @return ApiResponse&lt;TaxRateLocationResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxRateLocationResponses> getBatchTaxRateByLocationWithHttpInfo(String taxRateTypeId, TaxRateLocationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getBatchTaxRateByLocationCall(taxRateTypeId, body, null, null);
        Type localVarReturnType = new TypeToken<TaxRateLocationResponses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post Taxrate By Location (asynchronously)
     * This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param body TaxRateLocationRequest Class Object having tax rate request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBatchTaxRateByLocationAsync(String taxRateTypeId, TaxRateLocationRequest body, final ApiCallback<TaxRateLocationResponses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBatchTaxRateByLocationCall(taxRateTypeId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxRateLocationResponses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getIPDTaxByAddress */
    private com.squareup.okhttp.Call getIPDTaxByAddressCall(String address, String returnLatLongFields, String latLongFormat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getIPDTaxByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geotax/v1/taxdistrict/ipd/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (returnLatLongFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "returnLatLongFields", returnLatLongFields));
        if (latLongFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latLongFormat", latLongFormat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get IPD Tax by Address
     * This will accept &#39;address&#39; as a parameter and will return one or many IPDs details for that region in which address will fall.
     * @param address The address to be searched. (required)
     * @param returnLatLongFields Y or N (default is N) - Returns Latitude Longitude Fields (optional)
     * @param latLongFormat (default is Decimal) - Returns Desired Latitude Longitude Format (optional)
     * @return TaxDistrictResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxDistrictResponse getIPDTaxByAddress(String address, String returnLatLongFields, String latLongFormat) throws ApiException {
        ApiResponse<TaxDistrictResponse> resp = getIPDTaxByAddressWithHttpInfo(address, returnLatLongFields, latLongFormat);
        return resp.getData();
    }

    /**
     * Get IPD Tax by Address
     * This will accept &#39;address&#39; as a parameter and will return one or many IPDs details for that region in which address will fall.
     * @param address The address to be searched. (required)
     * @param returnLatLongFields Y or N (default is N) - Returns Latitude Longitude Fields (optional)
     * @param latLongFormat (default is Decimal) - Returns Desired Latitude Longitude Format (optional)
     * @return ApiResponse&lt;TaxDistrictResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxDistrictResponse> getIPDTaxByAddressWithHttpInfo(String address, String returnLatLongFields, String latLongFormat) throws ApiException {
        com.squareup.okhttp.Call call = getIPDTaxByAddressCall(address, returnLatLongFields, latLongFormat, null, null);
        Type localVarReturnType = new TypeToken<TaxDistrictResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get IPD Tax by Address (asynchronously)
     * This will accept &#39;address&#39; as a parameter and will return one or many IPDs details for that region in which address will fall.
     * @param address The address to be searched. (required)
     * @param returnLatLongFields Y or N (default is N) - Returns Latitude Longitude Fields (optional)
     * @param latLongFormat (default is Decimal) - Returns Desired Latitude Longitude Format (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIPDTaxByAddressAsync(String address, String returnLatLongFields, String latLongFormat, final ApiCallback<TaxDistrictResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIPDTaxByAddressCall(address, returnLatLongFields, latLongFormat, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxDistrictResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getIPDTaxByAddressBatch */
    private com.squareup.okhttp.Call getIPDTaxByAddressBatchCall(IPDTaxByAddressBatchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getIPDTaxByAddressBatch(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geotax/v1/taxdistrict/ipd/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get IPD Tax for batch requests
     * Get IPD Tax for batch requests
     * @param body IPDTaxByAddressBatchRequest Class Object having IPD tax request (required)
     * @return TaxDistrictResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxDistrictResponseList getIPDTaxByAddressBatch(IPDTaxByAddressBatchRequest body) throws ApiException {
        ApiResponse<TaxDistrictResponseList> resp = getIPDTaxByAddressBatchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Get IPD Tax for batch requests
     * Get IPD Tax for batch requests
     * @param body IPDTaxByAddressBatchRequest Class Object having IPD tax request (required)
     * @return ApiResponse&lt;TaxDistrictResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxDistrictResponseList> getIPDTaxByAddressBatchWithHttpInfo(IPDTaxByAddressBatchRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getIPDTaxByAddressBatchCall(body, null, null);
        Type localVarReturnType = new TypeToken<TaxDistrictResponseList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get IPD Tax for batch requests (asynchronously)
     * Get IPD Tax for batch requests
     * @param body IPDTaxByAddressBatchRequest Class Object having IPD tax request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIPDTaxByAddressBatchAsync(IPDTaxByAddressBatchRequest body, final ApiCallback<TaxDistrictResponseList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIPDTaxByAddressBatchCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxDistrictResponseList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSpecificTaxByAddress */
    private com.squareup.okhttp.Call getSpecificTaxByAddressCall(String taxRateTypeId, String address, String purchaseAmount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'taxRateTypeId' is set
        if (taxRateTypeId == null) {
            throw new ApiException("Missing the required parameter 'taxRateTypeId' when calling getSpecificTaxByAddress(Async)");
        }
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getSpecificTaxByAddress(Async)");
        }
        
        // verify the required parameter 'purchaseAmount' is set
        if (purchaseAmount == null) {
            throw new ApiException("Missing the required parameter 'purchaseAmount' when calling getSpecificTaxByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geotax/v1/tax/{taxRateTypeId}/byaddress".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taxRateTypeId" + "\\}", apiClient.escapeString(taxRateTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (purchaseAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "purchaseAmount", purchaseAmount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Tax By Address
     * This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
     * @param taxRateTypeId The tax rate id. (required)
     * @param address The address to be searched. (required)
     * @param purchaseAmount The amount on which tax to be calculated. (required)
     * @return TaxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxResponse getSpecificTaxByAddress(String taxRateTypeId, String address, String purchaseAmount) throws ApiException {
        ApiResponse<TaxResponse> resp = getSpecificTaxByAddressWithHttpInfo(taxRateTypeId, address, purchaseAmount);
        return resp.getData();
    }

    /**
     * Get Tax By Address
     * This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
     * @param taxRateTypeId The tax rate id. (required)
     * @param address The address to be searched. (required)
     * @param purchaseAmount The amount on which tax to be calculated. (required)
     * @return ApiResponse&lt;TaxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxResponse> getSpecificTaxByAddressWithHttpInfo(String taxRateTypeId, String address, String purchaseAmount) throws ApiException {
        com.squareup.okhttp.Call call = getSpecificTaxByAddressCall(taxRateTypeId, address, purchaseAmount, null, null);
        Type localVarReturnType = new TypeToken<TaxResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Tax By Address (asynchronously)
     * This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
     * @param taxRateTypeId The tax rate id. (required)
     * @param address The address to be searched. (required)
     * @param purchaseAmount The amount on which tax to be calculated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpecificTaxByAddressAsync(String taxRateTypeId, String address, String purchaseAmount, final ApiCallback<TaxResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpecificTaxByAddressCall(taxRateTypeId, address, purchaseAmount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSpecificTaxByLocation */
    private com.squareup.okhttp.Call getSpecificTaxByLocationCall(String taxRateTypeId, String latitude, String longitude, String purchaseAmount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'taxRateTypeId' is set
        if (taxRateTypeId == null) {
            throw new ApiException("Missing the required parameter 'taxRateTypeId' when calling getSpecificTaxByLocation(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getSpecificTaxByLocation(Async)");
        }
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getSpecificTaxByLocation(Async)");
        }
        
        // verify the required parameter 'purchaseAmount' is set
        if (purchaseAmount == null) {
            throw new ApiException("Missing the required parameter 'purchaseAmount' when calling getSpecificTaxByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geotax/v1/tax/{taxRateTypeId}/bylocation".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taxRateTypeId" + "\\}", apiClient.escapeString(taxRateTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (purchaseAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "purchaseAmount", purchaseAmount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Tax By Location
     * This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
     * @param taxRateTypeId The tax rate id. (required)
     * @param latitude Latitude of the location. (required)
     * @param longitude Longitude of the location. (required)
     * @param purchaseAmount The amount on which tax to be calculated. (required)
     * @return TaxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxResponse getSpecificTaxByLocation(String taxRateTypeId, String latitude, String longitude, String purchaseAmount) throws ApiException {
        ApiResponse<TaxResponse> resp = getSpecificTaxByLocationWithHttpInfo(taxRateTypeId, latitude, longitude, purchaseAmount);
        return resp.getData();
    }

    /**
     * Get Tax By Location
     * This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
     * @param taxRateTypeId The tax rate id. (required)
     * @param latitude Latitude of the location. (required)
     * @param longitude Longitude of the location. (required)
     * @param purchaseAmount The amount on which tax to be calculated. (required)
     * @return ApiResponse&lt;TaxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxResponse> getSpecificTaxByLocationWithHttpInfo(String taxRateTypeId, String latitude, String longitude, String purchaseAmount) throws ApiException {
        com.squareup.okhttp.Call call = getSpecificTaxByLocationCall(taxRateTypeId, latitude, longitude, purchaseAmount, null, null);
        Type localVarReturnType = new TypeToken<TaxResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Tax By Location (asynchronously)
     * This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
     * @param taxRateTypeId The tax rate id. (required)
     * @param latitude Latitude of the location. (required)
     * @param longitude Longitude of the location. (required)
     * @param purchaseAmount The amount on which tax to be calculated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpecificTaxByLocationAsync(String taxRateTypeId, String latitude, String longitude, String purchaseAmount, final ApiCallback<TaxResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpecificTaxByLocationCall(taxRateTypeId, latitude, longitude, purchaseAmount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSpecificTaxRateByAddress */
    private com.squareup.okhttp.Call getSpecificTaxRateByAddressCall(String taxRateTypeId, String address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'taxRateTypeId' is set
        if (taxRateTypeId == null) {
            throw new ApiException("Missing the required parameter 'taxRateTypeId' when calling getSpecificTaxRateByAddress(Async)");
        }
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getSpecificTaxRateByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/byaddress".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taxRateTypeId" + "\\}", apiClient.escapeString(taxRateTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Taxrate By Address
     * Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param address The address to be searched. (required)
     * @return TaxRateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxRateResponse getSpecificTaxRateByAddress(String taxRateTypeId, String address) throws ApiException {
        ApiResponse<TaxRateResponse> resp = getSpecificTaxRateByAddressWithHttpInfo(taxRateTypeId, address);
        return resp.getData();
    }

    /**
     * Get Taxrate By Address
     * Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param address The address to be searched. (required)
     * @return ApiResponse&lt;TaxRateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxRateResponse> getSpecificTaxRateByAddressWithHttpInfo(String taxRateTypeId, String address) throws ApiException {
        com.squareup.okhttp.Call call = getSpecificTaxRateByAddressCall(taxRateTypeId, address, null, null);
        Type localVarReturnType = new TypeToken<TaxRateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Taxrate By Address (asynchronously)
     * Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param address The address to be searched. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpecificTaxRateByAddressAsync(String taxRateTypeId, String address, final ApiCallback<TaxRateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpecificTaxRateByAddressCall(taxRateTypeId, address, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxRateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSpecificTaxRateByLocation */
    private com.squareup.okhttp.Call getSpecificTaxRateByLocationCall(String taxRateTypeId, String latitude, String longitude, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'taxRateTypeId' is set
        if (taxRateTypeId == null) {
            throw new ApiException("Missing the required parameter 'taxRateTypeId' when calling getSpecificTaxRateByLocation(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getSpecificTaxRateByLocation(Async)");
        }
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getSpecificTaxRateByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geotax/v1/taxrate/{taxRateTypeId}/bylocation".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taxRateTypeId" + "\\}", apiClient.escapeString(taxRateTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Taxrate By Location
     * Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param latitude Latitude of the location. (required)
     * @param longitude Longitude of the location. (required)
     * @return TaxRateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxRateResponse getSpecificTaxRateByLocation(String taxRateTypeId, String latitude, String longitude) throws ApiException {
        ApiResponse<TaxRateResponse> resp = getSpecificTaxRateByLocationWithHttpInfo(taxRateTypeId, latitude, longitude);
        return resp.getData();
    }

    /**
     * Get Taxrate By Location
     * Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param latitude Latitude of the location. (required)
     * @param longitude Longitude of the location. (required)
     * @return ApiResponse&lt;TaxRateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxRateResponse> getSpecificTaxRateByLocationWithHttpInfo(String taxRateTypeId, String latitude, String longitude) throws ApiException {
        com.squareup.okhttp.Call call = getSpecificTaxRateByLocationCall(taxRateTypeId, latitude, longitude, null, null);
        Type localVarReturnType = new TypeToken<TaxRateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Taxrate By Location (asynchronously)
     * Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
     * @param taxRateTypeId The tax rate id. (required)
     * @param latitude Latitude of the location. (required)
     * @param longitude Longitude of the location. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpecificTaxRateByLocationAsync(String taxRateTypeId, String latitude, String longitude, final ApiCallback<TaxRateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpecificTaxRateByLocationCall(taxRateTypeId, latitude, longitude, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxRateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
