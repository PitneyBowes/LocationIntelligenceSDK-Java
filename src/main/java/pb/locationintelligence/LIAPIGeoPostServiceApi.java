/**
 * Location Intelligence APIs
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 8.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package pb.locationintelligence;

import pb.ApiCallback;
import pb.ApiClient;
import pb.ApiException;
import pb.ApiResponse;
import pb.Configuration;
import pb.Pair;
import pb.ProgressRequestBody;
import pb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import pb.locationintelligence.model.CarrierRouteResponse;
import pb.locationintelligence.model.CarrierRouteAddressRequest;
import pb.locationintelligence.model.CarrierRouteResponseList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LIAPIGeoPostServiceApi {
    private ApiClient apiClient;

    public LIAPIGeoPostServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LIAPIGeoPostServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getCarrierRoutesByAddress */
    private com.squareup.okhttp.Call getCarrierRoutesByAddressCall(String address, String includeGeometry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getCarrierRoutesByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/geopost/v1/carrierroute/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (includeGeometry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeGeometry", includeGeometry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Carrier Route By Address.
     * Get United States Postal Service (USPS) carrier route data for the requested address
     * @param address free form address text (required)
     * @param includeGeometry Y or N (default is Y) - if it is Y, then geometry will be part of response (optional)
     * @return CarrierRouteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CarrierRouteResponse getCarrierRoutesByAddress(String address, String includeGeometry) throws ApiException {
        ApiResponse<CarrierRouteResponse> resp = getCarrierRoutesByAddressWithHttpInfo(address, includeGeometry);
        return resp.getData();
    }

    /**
     * Carrier Route By Address.
     * Get United States Postal Service (USPS) carrier route data for the requested address
     * @param address free form address text (required)
     * @param includeGeometry Y or N (default is Y) - if it is Y, then geometry will be part of response (optional)
     * @return ApiResponse&lt;CarrierRouteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CarrierRouteResponse> getCarrierRoutesByAddressWithHttpInfo(String address, String includeGeometry) throws ApiException {
        com.squareup.okhttp.Call call = getCarrierRoutesByAddressCall(address, includeGeometry, null, null);
        Type localVarReturnType = new TypeToken<CarrierRouteResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Carrier Route By Address. (asynchronously)
     * Get United States Postal Service (USPS) carrier route data for the requested address
     * @param address free form address text (required)
     * @param includeGeometry Y or N (default is Y) - if it is Y, then geometry will be part of response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCarrierRoutesByAddressAsync(String address, String includeGeometry, final ApiCallback<CarrierRouteResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCarrierRoutesByAddressCall(address, includeGeometry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CarrierRouteResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCarrierRoutesByAddressBatch */
    private com.squareup.okhttp.Call getCarrierRoutesByAddressBatchCall(CarrierRouteAddressRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        

        // create path and map variables
        String localVarPath = "/geopost/v1/carrierroute/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets GeoPost Carrier Routes for Multiple Addresses
     * Gets GeoPost Carrier Routes for Multiple Addresses
     * @param body  (optional)
     * @return CarrierRouteResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CarrierRouteResponseList getCarrierRoutesByAddressBatch(CarrierRouteAddressRequest body) throws ApiException {
        ApiResponse<CarrierRouteResponseList> resp = getCarrierRoutesByAddressBatchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Gets GeoPost Carrier Routes for Multiple Addresses
     * Gets GeoPost Carrier Routes for Multiple Addresses
     * @param body  (optional)
     * @return ApiResponse&lt;CarrierRouteResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CarrierRouteResponseList> getCarrierRoutesByAddressBatchWithHttpInfo(CarrierRouteAddressRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getCarrierRoutesByAddressBatchCall(body, null, null);
        Type localVarReturnType = new TypeToken<CarrierRouteResponseList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets GeoPost Carrier Routes for Multiple Addresses (asynchronously)
     * Gets GeoPost Carrier Routes for Multiple Addresses
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCarrierRoutesByAddressBatchAsync(CarrierRouteAddressRequest body, final ApiCallback<CarrierRouteResponseList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCarrierRoutesByAddressBatchCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CarrierRouteResponseList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
