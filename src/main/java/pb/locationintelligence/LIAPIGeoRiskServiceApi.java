/**
 * Location Intelligence APIs
 * Incorporate our extensive geodata into everyday applications, business processes and workflows.
 *
 * OpenAPI spec version: 3.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package pb.locationintelligence;

import pb.ApiCallback;
import pb.ApiClient;
import pb.ApiException;
import pb.ApiResponse;
import pb.Configuration;
import pb.Pair;
import pb.ProgressRequestBody;
import pb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import pb.locationintelligence.model.CrimeRiskResponse;
import pb.locationintelligence.model.WaterBodyResponse;
import pb.locationintelligence.model.EarthquakeHistory;
import pb.locationintelligence.model.EarthquakeRiskResponse;
import pb.locationintelligence.model.FireHistory;
import pb.locationintelligence.model.FireRiskResponse;
import pb.locationintelligence.model.FireRiskByAddressRequest;
import pb.locationintelligence.model.FireRiskResponseList;
import pb.locationintelligence.model.FireRiskByLocationRequest;
import pb.locationintelligence.model.FireStations;
import pb.locationintelligence.model.FloodRiskResponse;
import pb.locationintelligence.model.FloodRiskResponseList;
import pb.locationintelligence.model.FloodRiskByAddressRequest;
import pb.locationintelligence.model.FloodRiskByLocationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LIAPIGeoRiskServiceApi {
    private ApiClient apiClient;

    public LIAPIGeoRiskServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LIAPIGeoRiskServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getCrimeRiskByAddress */
    private com.squareup.okhttp.Call getCrimeRiskByAddressCall(String address, String type, String includeGeometry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getCrimeRiskByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/crime/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (includeGeometry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeGeometry", includeGeometry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets CrimeRiskResponse
     * Returns the crime data or crime indexes for a given address input.
     * @param address Free-form address text. (required)
     * @param type Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return CrimeRiskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CrimeRiskResponse getCrimeRiskByAddress(String address, String type, String includeGeometry) throws ApiException {
        ApiResponse<CrimeRiskResponse> resp = getCrimeRiskByAddressWithHttpInfo(address, type, includeGeometry);
        return resp.getData();
    }

    /**
     * Gets CrimeRiskResponse
     * Returns the crime data or crime indexes for a given address input.
     * @param address Free-form address text. (required)
     * @param type Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return ApiResponse&lt;CrimeRiskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CrimeRiskResponse> getCrimeRiskByAddressWithHttpInfo(String address, String type, String includeGeometry) throws ApiException {
        com.squareup.okhttp.Call call = getCrimeRiskByAddressCall(address, type, includeGeometry, null, null);
        Type localVarReturnType = new TypeToken<CrimeRiskResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets CrimeRiskResponse (asynchronously)
     * Returns the crime data or crime indexes for a given address input.
     * @param address Free-form address text. (required)
     * @param type Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCrimeRiskByAddressAsync(String address, String type, String includeGeometry, final ApiCallback<CrimeRiskResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCrimeRiskByAddressCall(address, type, includeGeometry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CrimeRiskResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCrimeRiskByLocation */
    private com.squareup.okhttp.Call getCrimeRiskByLocationCall(String longitude, String latitude, String type, String includeGeometry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getCrimeRiskByLocation(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getCrimeRiskByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/crime/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (includeGeometry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeGeometry", includeGeometry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets CrimeRiskResponse
     * Returns the crime data or crime indexes for a given location.
     * @param longitude The longitude of the location (required)
     * @param latitude The latitude of the location (required)
     * @param type Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return CrimeRiskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CrimeRiskResponse getCrimeRiskByLocation(String longitude, String latitude, String type, String includeGeometry) throws ApiException {
        ApiResponse<CrimeRiskResponse> resp = getCrimeRiskByLocationWithHttpInfo(longitude, latitude, type, includeGeometry);
        return resp.getData();
    }

    /**
     * Gets CrimeRiskResponse
     * Returns the crime data or crime indexes for a given location.
     * @param longitude The longitude of the location (required)
     * @param latitude The latitude of the location (required)
     * @param type Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return ApiResponse&lt;CrimeRiskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CrimeRiskResponse> getCrimeRiskByLocationWithHttpInfo(String longitude, String latitude, String type, String includeGeometry) throws ApiException {
        com.squareup.okhttp.Call call = getCrimeRiskByLocationCall(longitude, latitude, type, includeGeometry, null, null);
        Type localVarReturnType = new TypeToken<CrimeRiskResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets CrimeRiskResponse (asynchronously)
     * Returns the crime data or crime indexes for a given location.
     * @param longitude The longitude of the location (required)
     * @param latitude The latitude of the location (required)
     * @param type Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCrimeRiskByLocationAsync(String longitude, String latitude, String type, String includeGeometry, final ApiCallback<CrimeRiskResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCrimeRiskByLocationCall(longitude, latitude, type, includeGeometry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CrimeRiskResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDistanceToCoastByAddress */
    private com.squareup.okhttp.Call getDistanceToCoastByAddressCall(String address, String maxCandidates, String waterBodyType, String searchDistance, String searchDistanceUnit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getDistanceToCoastByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/shoreline/distancetocoast/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (maxCandidates != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxCandidates", maxCandidates));
        if (waterBodyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "waterBodyType", waterBodyType));
        if (searchDistance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchDistance", searchDistance));
        if (searchDistanceUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchDistanceUnit", searchDistanceUnit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets WaterBodyResponse
     * Gets WaterBodyResponse
     * @param address The address of the location (required)
     * @param maxCandidates 1 (default value), Maximum value is 3 (optional)
     * @param waterBodyType all (default value), oceanandsea,lake,others,unknown,intermittent (optional)
     * @param searchDistance 5000 miles (default value), minimum should be 0 (optional)
     * @param searchDistanceUnit miles (default value),feet, kilometers, meters (optional)
     * @return WaterBodyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WaterBodyResponse getDistanceToCoastByAddress(String address, String maxCandidates, String waterBodyType, String searchDistance, String searchDistanceUnit) throws ApiException {
        ApiResponse<WaterBodyResponse> resp = getDistanceToCoastByAddressWithHttpInfo(address, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit);
        return resp.getData();
    }

    /**
     * Gets WaterBodyResponse
     * Gets WaterBodyResponse
     * @param address The address of the location (required)
     * @param maxCandidates 1 (default value), Maximum value is 3 (optional)
     * @param waterBodyType all (default value), oceanandsea,lake,others,unknown,intermittent (optional)
     * @param searchDistance 5000 miles (default value), minimum should be 0 (optional)
     * @param searchDistanceUnit miles (default value),feet, kilometers, meters (optional)
     * @return ApiResponse&lt;WaterBodyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WaterBodyResponse> getDistanceToCoastByAddressWithHttpInfo(String address, String maxCandidates, String waterBodyType, String searchDistance, String searchDistanceUnit) throws ApiException {
        com.squareup.okhttp.Call call = getDistanceToCoastByAddressCall(address, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit, null, null);
        Type localVarReturnType = new TypeToken<WaterBodyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets WaterBodyResponse (asynchronously)
     * Gets WaterBodyResponse
     * @param address The address of the location (required)
     * @param maxCandidates 1 (default value), Maximum value is 3 (optional)
     * @param waterBodyType all (default value), oceanandsea,lake,others,unknown,intermittent (optional)
     * @param searchDistance 5000 miles (default value), minimum should be 0 (optional)
     * @param searchDistanceUnit miles (default value),feet, kilometers, meters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDistanceToCoastByAddressAsync(String address, String maxCandidates, String waterBodyType, String searchDistance, String searchDistanceUnit, final ApiCallback<WaterBodyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDistanceToCoastByAddressCall(address, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WaterBodyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDistanceToCoastByLocation */
    private com.squareup.okhttp.Call getDistanceToCoastByLocationCall(String longitude, String latitude, String maxCandidates, String waterBodyType, String searchDistance, String searchDistanceUnit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getDistanceToCoastByLocation(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getDistanceToCoastByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/shoreline/distancetocoast/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));
        if (maxCandidates != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxCandidates", maxCandidates));
        if (waterBodyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "waterBodyType", waterBodyType));
        if (searchDistance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchDistance", searchDistance));
        if (searchDistanceUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchDistanceUnit", searchDistanceUnit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets WaterBodyResponse
     * Gets WaterBodyResponse
     * @param longitude The longitude of the location (required)
     * @param latitude The latitude of the location (required)
     * @param maxCandidates 1 (default value), Maximum value is 3 (optional)
     * @param waterBodyType all (default value), oceanandsea,lake,others,unknown,intermittent (optional)
     * @param searchDistance This specifies the search distance (optional)
     * @param searchDistanceUnit miles (default value),feet, kilometers, meters (optional)
     * @return WaterBodyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WaterBodyResponse getDistanceToCoastByLocation(String longitude, String latitude, String maxCandidates, String waterBodyType, String searchDistance, String searchDistanceUnit) throws ApiException {
        ApiResponse<WaterBodyResponse> resp = getDistanceToCoastByLocationWithHttpInfo(longitude, latitude, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit);
        return resp.getData();
    }

    /**
     * Gets WaterBodyResponse
     * Gets WaterBodyResponse
     * @param longitude The longitude of the location (required)
     * @param latitude The latitude of the location (required)
     * @param maxCandidates 1 (default value), Maximum value is 3 (optional)
     * @param waterBodyType all (default value), oceanandsea,lake,others,unknown,intermittent (optional)
     * @param searchDistance This specifies the search distance (optional)
     * @param searchDistanceUnit miles (default value),feet, kilometers, meters (optional)
     * @return ApiResponse&lt;WaterBodyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WaterBodyResponse> getDistanceToCoastByLocationWithHttpInfo(String longitude, String latitude, String maxCandidates, String waterBodyType, String searchDistance, String searchDistanceUnit) throws ApiException {
        com.squareup.okhttp.Call call = getDistanceToCoastByLocationCall(longitude, latitude, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit, null, null);
        Type localVarReturnType = new TypeToken<WaterBodyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets WaterBodyResponse (asynchronously)
     * Gets WaterBodyResponse
     * @param longitude The longitude of the location (required)
     * @param latitude The latitude of the location (required)
     * @param maxCandidates 1 (default value), Maximum value is 3 (optional)
     * @param waterBodyType all (default value), oceanandsea,lake,others,unknown,intermittent (optional)
     * @param searchDistance This specifies the search distance (optional)
     * @param searchDistanceUnit miles (default value),feet, kilometers, meters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDistanceToCoastByLocationAsync(String longitude, String latitude, String maxCandidates, String waterBodyType, String searchDistance, String searchDistanceUnit, final ApiCallback<WaterBodyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDistanceToCoastByLocationCall(longitude, latitude, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WaterBodyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getEarthquakeHistory */
    private com.squareup.okhttp.Call getEarthquakeHistoryCall(String postCode, String startDate, String endDate, String minMagnitude, String maxMagnitude, String maxCandidates, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'postCode' is set
        if (postCode == null) {
            throw new ApiException("Missing the required parameter 'postCode' when calling getEarthquakeHistory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/earthquakehistory".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (postCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "postCode", postCode));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endDate", endDate));
        if (minMagnitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "minMagnitude", minMagnitude));
        if (maxMagnitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxMagnitude", maxMagnitude));
        if (maxCandidates != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxCandidates", maxCandidates));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets EarthquakeHistory
     * Gets EarthquakeHistory
     * @param postCode 5 digit Postal code to search (required)
     * @param startDate Start time in milliseconds(UTC) (optional)
     * @param endDate End time in milliseconds(UTC) (optional)
     * @param minMagnitude Minimum richter scale magnitude (optional)
     * @param maxMagnitude Maximum Richter scale magnitude (optional)
     * @param maxCandidates Maximum response events (optional, default to 1)
     * @return EarthquakeHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EarthquakeHistory getEarthquakeHistory(String postCode, String startDate, String endDate, String minMagnitude, String maxMagnitude, String maxCandidates) throws ApiException {
        ApiResponse<EarthquakeHistory> resp = getEarthquakeHistoryWithHttpInfo(postCode, startDate, endDate, minMagnitude, maxMagnitude, maxCandidates);
        return resp.getData();
    }

    /**
     * Gets EarthquakeHistory
     * Gets EarthquakeHistory
     * @param postCode 5 digit Postal code to search (required)
     * @param startDate Start time in milliseconds(UTC) (optional)
     * @param endDate End time in milliseconds(UTC) (optional)
     * @param minMagnitude Minimum richter scale magnitude (optional)
     * @param maxMagnitude Maximum Richter scale magnitude (optional)
     * @param maxCandidates Maximum response events (optional, default to 1)
     * @return ApiResponse&lt;EarthquakeHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EarthquakeHistory> getEarthquakeHistoryWithHttpInfo(String postCode, String startDate, String endDate, String minMagnitude, String maxMagnitude, String maxCandidates) throws ApiException {
        com.squareup.okhttp.Call call = getEarthquakeHistoryCall(postCode, startDate, endDate, minMagnitude, maxMagnitude, maxCandidates, null, null);
        Type localVarReturnType = new TypeToken<EarthquakeHistory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets EarthquakeHistory (asynchronously)
     * Gets EarthquakeHistory
     * @param postCode 5 digit Postal code to search (required)
     * @param startDate Start time in milliseconds(UTC) (optional)
     * @param endDate End time in milliseconds(UTC) (optional)
     * @param minMagnitude Minimum richter scale magnitude (optional)
     * @param maxMagnitude Maximum Richter scale magnitude (optional)
     * @param maxCandidates Maximum response events (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEarthquakeHistoryAsync(String postCode, String startDate, String endDate, String minMagnitude, String maxMagnitude, String maxCandidates, final ApiCallback<EarthquakeHistory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEarthquakeHistoryCall(postCode, startDate, endDate, minMagnitude, maxMagnitude, maxCandidates, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EarthquakeHistory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getEarthquakeRiskByAddress */
    private com.squareup.okhttp.Call getEarthquakeRiskByAddressCall(String address, String richterValue, String includeGeometry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getEarthquakeRiskByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/earthquake/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (richterValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "richterValue", richterValue));
        if (includeGeometry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeGeometry", includeGeometry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets EarthquakeRiskResponse
     * Returns the count of earthquake events for various richter measurements and values for an input address.
     * @param address Free-form address text (required)
     * @param richterValue Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return EarthquakeRiskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EarthquakeRiskResponse getEarthquakeRiskByAddress(String address, String richterValue, String includeGeometry) throws ApiException {
        ApiResponse<EarthquakeRiskResponse> resp = getEarthquakeRiskByAddressWithHttpInfo(address, richterValue, includeGeometry);
        return resp.getData();
    }

    /**
     * Gets EarthquakeRiskResponse
     * Returns the count of earthquake events for various richter measurements and values for an input address.
     * @param address Free-form address text (required)
     * @param richterValue Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return ApiResponse&lt;EarthquakeRiskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EarthquakeRiskResponse> getEarthquakeRiskByAddressWithHttpInfo(String address, String richterValue, String includeGeometry) throws ApiException {
        com.squareup.okhttp.Call call = getEarthquakeRiskByAddressCall(address, richterValue, includeGeometry, null, null);
        Type localVarReturnType = new TypeToken<EarthquakeRiskResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets EarthquakeRiskResponse (asynchronously)
     * Returns the count of earthquake events for various richter measurements and values for an input address.
     * @param address Free-form address text (required)
     * @param richterValue Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEarthquakeRiskByAddressAsync(String address, String richterValue, String includeGeometry, final ApiCallback<EarthquakeRiskResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEarthquakeRiskByAddressCall(address, richterValue, includeGeometry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EarthquakeRiskResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getEarthquakeRiskByLocation */
    private com.squareup.okhttp.Call getEarthquakeRiskByLocationCall(String longitude, String latitude, String richterValue, String includeGeometry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getEarthquakeRiskByLocation(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getEarthquakeRiskByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/earthquake/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));
        if (richterValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "richterValue", richterValue));
        if (includeGeometry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeGeometry", includeGeometry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets EarthquakeRiskResponse
     * Gets EarthquakeRiskResponse
     * @param longitude The longitude of the location (required)
     * @param latitude The latitude of the location (required)
     * @param richterValue Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return EarthquakeRiskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EarthquakeRiskResponse getEarthquakeRiskByLocation(String longitude, String latitude, String richterValue, String includeGeometry) throws ApiException {
        ApiResponse<EarthquakeRiskResponse> resp = getEarthquakeRiskByLocationWithHttpInfo(longitude, latitude, richterValue, includeGeometry);
        return resp.getData();
    }

    /**
     * Gets EarthquakeRiskResponse
     * Gets EarthquakeRiskResponse
     * @param longitude The longitude of the location (required)
     * @param latitude The latitude of the location (required)
     * @param richterValue Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return ApiResponse&lt;EarthquakeRiskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EarthquakeRiskResponse> getEarthquakeRiskByLocationWithHttpInfo(String longitude, String latitude, String richterValue, String includeGeometry) throws ApiException {
        com.squareup.okhttp.Call call = getEarthquakeRiskByLocationCall(longitude, latitude, richterValue, includeGeometry, null, null);
        Type localVarReturnType = new TypeToken<EarthquakeRiskResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets EarthquakeRiskResponse (asynchronously)
     * Gets EarthquakeRiskResponse
     * @param longitude The longitude of the location (required)
     * @param latitude The latitude of the location (required)
     * @param richterValue Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEarthquakeRiskByLocationAsync(String longitude, String latitude, String richterValue, String includeGeometry, final ApiCallback<EarthquakeRiskResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEarthquakeRiskByLocationCall(longitude, latitude, richterValue, includeGeometry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EarthquakeRiskResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFireHistory */
    private com.squareup.okhttp.Call getFireHistoryCall(String postCode, String startDate, String endDate, String maxCandidates, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'postCode' is set
        if (postCode == null) {
            throw new ApiException("Missing the required parameter 'postCode' when calling getFireHistory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/firehistory".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (postCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "postCode", postCode));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endDate", endDate));
        if (maxCandidates != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxCandidates", maxCandidates));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets FireHistory
     * Gets FireHistory
     * @param postCode 5 digit Postal code to search (required)
     * @param startDate Start time in milliseconds(UTC) (optional)
     * @param endDate End time in milliseconds(UTC) (optional)
     * @param maxCandidates Maximum response events (optional, default to 1)
     * @return FireHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FireHistory getFireHistory(String postCode, String startDate, String endDate, String maxCandidates) throws ApiException {
        ApiResponse<FireHistory> resp = getFireHistoryWithHttpInfo(postCode, startDate, endDate, maxCandidates);
        return resp.getData();
    }

    /**
     * Gets FireHistory
     * Gets FireHistory
     * @param postCode 5 digit Postal code to search (required)
     * @param startDate Start time in milliseconds(UTC) (optional)
     * @param endDate End time in milliseconds(UTC) (optional)
     * @param maxCandidates Maximum response events (optional, default to 1)
     * @return ApiResponse&lt;FireHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FireHistory> getFireHistoryWithHttpInfo(String postCode, String startDate, String endDate, String maxCandidates) throws ApiException {
        com.squareup.okhttp.Call call = getFireHistoryCall(postCode, startDate, endDate, maxCandidates, null, null);
        Type localVarReturnType = new TypeToken<FireHistory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets FireHistory (asynchronously)
     * Gets FireHistory
     * @param postCode 5 digit Postal code to search (required)
     * @param startDate Start time in milliseconds(UTC) (optional)
     * @param endDate End time in milliseconds(UTC) (optional)
     * @param maxCandidates Maximum response events (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFireHistoryAsync(String postCode, String startDate, String endDate, String maxCandidates, final ApiCallback<FireHistory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFireHistoryCall(postCode, startDate, endDate, maxCandidates, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FireHistory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFireRiskByAddress */
    private com.squareup.okhttp.Call getFireRiskByAddressCall(String address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getFireRiskByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/fire/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets FireRiskResponse
     * Returns the fire data based on address input.
     * @param address Free-form address text (required)
     * @return FireRiskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FireRiskResponse getFireRiskByAddress(String address) throws ApiException {
        ApiResponse<FireRiskResponse> resp = getFireRiskByAddressWithHttpInfo(address);
        return resp.getData();
    }

    /**
     * Gets FireRiskResponse
     * Returns the fire data based on address input.
     * @param address Free-form address text (required)
     * @return ApiResponse&lt;FireRiskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FireRiskResponse> getFireRiskByAddressWithHttpInfo(String address) throws ApiException {
        com.squareup.okhttp.Call call = getFireRiskByAddressCall(address, null, null);
        Type localVarReturnType = new TypeToken<FireRiskResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets FireRiskResponse (asynchronously)
     * Returns the fire data based on address input.
     * @param address Free-form address text (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFireRiskByAddressAsync(String address, final ApiCallback<FireRiskResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFireRiskByAddressCall(address, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FireRiskResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFireRiskByAddressBatch */
    private com.squareup.okhttp.Call getFireRiskByAddressBatchCall(FireRiskByAddressRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        

        // create path and map variables
        String localVarPath = "/georisk/v1/fire/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Batch method for getting fire risk by address
     * Batch method for getting fire risk by address
     * @param body  (optional)
     * @return FireRiskResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FireRiskResponseList getFireRiskByAddressBatch(FireRiskByAddressRequest body) throws ApiException {
        ApiResponse<FireRiskResponseList> resp = getFireRiskByAddressBatchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Batch method for getting fire risk by address
     * Batch method for getting fire risk by address
     * @param body  (optional)
     * @return ApiResponse&lt;FireRiskResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FireRiskResponseList> getFireRiskByAddressBatchWithHttpInfo(FireRiskByAddressRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getFireRiskByAddressBatchCall(body, null, null);
        Type localVarReturnType = new TypeToken<FireRiskResponseList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Batch method for getting fire risk by address (asynchronously)
     * Batch method for getting fire risk by address
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFireRiskByAddressBatchAsync(FireRiskByAddressRequest body, final ApiCallback<FireRiskResponseList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFireRiskByAddressBatchCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FireRiskResponseList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFireRiskByLocation */
    private com.squareup.okhttp.Call getFireRiskByLocationCall(String longitude, String latitude, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getFireRiskByLocation(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getFireRiskByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/fire/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets FireRiskResponse
     * Returns the fire data based on location input.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @return FireRiskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FireRiskResponse getFireRiskByLocation(String longitude, String latitude) throws ApiException {
        ApiResponse<FireRiskResponse> resp = getFireRiskByLocationWithHttpInfo(longitude, latitude);
        return resp.getData();
    }

    /**
     * Gets FireRiskResponse
     * Returns the fire data based on location input.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @return ApiResponse&lt;FireRiskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FireRiskResponse> getFireRiskByLocationWithHttpInfo(String longitude, String latitude) throws ApiException {
        com.squareup.okhttp.Call call = getFireRiskByLocationCall(longitude, latitude, null, null);
        Type localVarReturnType = new TypeToken<FireRiskResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets FireRiskResponse (asynchronously)
     * Returns the fire data based on location input.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFireRiskByLocationAsync(String longitude, String latitude, final ApiCallback<FireRiskResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFireRiskByLocationCall(longitude, latitude, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FireRiskResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFireRiskByLocationBatch */
    private com.squareup.okhttp.Call getFireRiskByLocationBatchCall(FireRiskByLocationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        

        // create path and map variables
        String localVarPath = "/georisk/v1/fire/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Batch method for getting fire risk by location
     * Batch method for getting fire risk by location
     * @param body  (optional)
     * @return FireRiskResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FireRiskResponseList getFireRiskByLocationBatch(FireRiskByLocationRequest body) throws ApiException {
        ApiResponse<FireRiskResponseList> resp = getFireRiskByLocationBatchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Batch method for getting fire risk by location
     * Batch method for getting fire risk by location
     * @param body  (optional)
     * @return ApiResponse&lt;FireRiskResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FireRiskResponseList> getFireRiskByLocationBatchWithHttpInfo(FireRiskByLocationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getFireRiskByLocationBatchCall(body, null, null);
        Type localVarReturnType = new TypeToken<FireRiskResponseList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Batch method for getting fire risk by location (asynchronously)
     * Batch method for getting fire risk by location
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFireRiskByLocationBatchAsync(FireRiskByLocationRequest body, final ApiCallback<FireRiskResponseList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFireRiskByLocationBatchCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FireRiskResponseList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFireStationByAddress */
    private com.squareup.okhttp.Call getFireStationByAddressCall(String address, String maxCandidates, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getFireStationByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/firestation/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (maxCandidates != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxCandidates", maxCandidates));
        if (travelTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelTime", travelTime));
        if (travelTimeUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelTimeUnit", travelTimeUnit));
        if (travelDistance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelDistance", travelDistance));
        if (travelDistanceUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelDistanceUnit", travelDistanceUnit));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortBy", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets FireStationResponse
     * Returns the nearest Firestations from an input address.
     * @param address The address to be searched. (required)
     * @param maxCandidates Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)
     * @param travelTime Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)
     * @param travelTimeUnit Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)
     * @param travelDistance Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)
     * @param travelDistanceUnit Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)
     * @param sortBy Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)
     * @return FireStations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FireStations getFireStationByAddress(String address, String maxCandidates, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String sortBy) throws ApiException {
        ApiResponse<FireStations> resp = getFireStationByAddressWithHttpInfo(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy);
        return resp.getData();
    }

    /**
     * Gets FireStationResponse
     * Returns the nearest Firestations from an input address.
     * @param address The address to be searched. (required)
     * @param maxCandidates Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)
     * @param travelTime Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)
     * @param travelTimeUnit Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)
     * @param travelDistance Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)
     * @param travelDistanceUnit Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)
     * @param sortBy Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)
     * @return ApiResponse&lt;FireStations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FireStations> getFireStationByAddressWithHttpInfo(String address, String maxCandidates, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getFireStationByAddressCall(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, null, null);
        Type localVarReturnType = new TypeToken<FireStations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets FireStationResponse (asynchronously)
     * Returns the nearest Firestations from an input address.
     * @param address The address to be searched. (required)
     * @param maxCandidates Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)
     * @param travelTime Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)
     * @param travelTimeUnit Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)
     * @param travelDistance Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)
     * @param travelDistanceUnit Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)
     * @param sortBy Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFireStationByAddressAsync(String address, String maxCandidates, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String sortBy, final ApiCallback<FireStations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFireStationByAddressCall(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FireStations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFireStationByLocation */
    private com.squareup.okhttp.Call getFireStationByLocationCall(String longitude, String latitude, String maxCandidates, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getFireStationByLocation(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getFireStationByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/firestation/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));
        if (maxCandidates != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxCandidates", maxCandidates));
        if (travelTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelTime", travelTime));
        if (travelTimeUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelTimeUnit", travelTimeUnit));
        if (travelDistance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelDistance", travelDistance));
        if (travelDistanceUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelDistanceUnit", travelDistanceUnit));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortBy", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets FireStationResponse
     * Returns the nearest Firestations from an input location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param maxCandidates Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)
     * @param travelTime Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)
     * @param travelTimeUnit Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)
     * @param travelDistance Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)
     * @param travelDistanceUnit Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)
     * @param sortBy Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)
     * @return FireStations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FireStations getFireStationByLocation(String longitude, String latitude, String maxCandidates, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String sortBy) throws ApiException {
        ApiResponse<FireStations> resp = getFireStationByLocationWithHttpInfo(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy);
        return resp.getData();
    }

    /**
     * Gets FireStationResponse
     * Returns the nearest Firestations from an input location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param maxCandidates Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)
     * @param travelTime Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)
     * @param travelTimeUnit Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)
     * @param travelDistance Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)
     * @param travelDistanceUnit Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)
     * @param sortBy Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)
     * @return ApiResponse&lt;FireStations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FireStations> getFireStationByLocationWithHttpInfo(String longitude, String latitude, String maxCandidates, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getFireStationByLocationCall(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, null, null);
        Type localVarReturnType = new TypeToken<FireStations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets FireStationResponse (asynchronously)
     * Returns the nearest Firestations from an input location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param maxCandidates Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)
     * @param travelTime Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)
     * @param travelTimeUnit Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)
     * @param travelDistance Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)
     * @param travelDistanceUnit Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)
     * @param sortBy Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFireStationByLocationAsync(String longitude, String latitude, String maxCandidates, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String sortBy, final ApiCallback<FireStations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFireStationByLocationCall(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FireStations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFloodRiskByAddress */
    private com.squareup.okhttp.Call getFloodRiskByAddressCall(String address, String includeZoneDesc, String includeGeometry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getFloodRiskByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/flood/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (includeZoneDesc != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeZoneDesc", includeZoneDesc));
        if (includeGeometry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeGeometry", includeGeometry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets FloodRiskResponse
     * Returns the Flood Risk data for flood zones based on an address.
     * @param address Free-text Address (required)
     * @param includeZoneDesc Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return FloodRiskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FloodRiskResponse getFloodRiskByAddress(String address, String includeZoneDesc, String includeGeometry) throws ApiException {
        ApiResponse<FloodRiskResponse> resp = getFloodRiskByAddressWithHttpInfo(address, includeZoneDesc, includeGeometry);
        return resp.getData();
    }

    /**
     * Gets FloodRiskResponse
     * Returns the Flood Risk data for flood zones based on an address.
     * @param address Free-text Address (required)
     * @param includeZoneDesc Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return ApiResponse&lt;FloodRiskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FloodRiskResponse> getFloodRiskByAddressWithHttpInfo(String address, String includeZoneDesc, String includeGeometry) throws ApiException {
        com.squareup.okhttp.Call call = getFloodRiskByAddressCall(address, includeZoneDesc, includeGeometry, null, null);
        Type localVarReturnType = new TypeToken<FloodRiskResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets FloodRiskResponse (asynchronously)
     * Returns the Flood Risk data for flood zones based on an address.
     * @param address Free-text Address (required)
     * @param includeZoneDesc Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFloodRiskByAddressAsync(String address, String includeZoneDesc, String includeGeometry, final ApiCallback<FloodRiskResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFloodRiskByAddressCall(address, includeZoneDesc, includeGeometry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FloodRiskResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFloodRiskByAddressBatch */
    private com.squareup.okhttp.Call getFloodRiskByAddressBatchCall(FloodRiskByAddressRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        

        // create path and map variables
        String localVarPath = "/georisk/v1/flood/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Batch method for getting flood risk by address
     * Batch method for getting flood risk by address
     * @param body  (optional)
     * @return FloodRiskResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FloodRiskResponseList getFloodRiskByAddressBatch(FloodRiskByAddressRequest body) throws ApiException {
        ApiResponse<FloodRiskResponseList> resp = getFloodRiskByAddressBatchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Batch method for getting flood risk by address
     * Batch method for getting flood risk by address
     * @param body  (optional)
     * @return ApiResponse&lt;FloodRiskResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FloodRiskResponseList> getFloodRiskByAddressBatchWithHttpInfo(FloodRiskByAddressRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getFloodRiskByAddressBatchCall(body, null, null);
        Type localVarReturnType = new TypeToken<FloodRiskResponseList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Batch method for getting flood risk by address (asynchronously)
     * Batch method for getting flood risk by address
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFloodRiskByAddressBatchAsync(FloodRiskByAddressRequest body, final ApiCallback<FloodRiskResponseList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFloodRiskByAddressBatchCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FloodRiskResponseList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFloodRiskByLocation */
    private com.squareup.okhttp.Call getFloodRiskByLocationCall(String longitude, String latitude, String includeZoneDesc, String includeGeometry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getFloodRiskByLocation(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getFloodRiskByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/georisk/v1/flood/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));
        if (includeZoneDesc != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeZoneDesc", includeZoneDesc));
        if (includeGeometry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeGeometry", includeGeometry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets FloodRiskResponse
     * Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param includeZoneDesc Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return FloodRiskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FloodRiskResponse getFloodRiskByLocation(String longitude, String latitude, String includeZoneDesc, String includeGeometry) throws ApiException {
        ApiResponse<FloodRiskResponse> resp = getFloodRiskByLocationWithHttpInfo(longitude, latitude, includeZoneDesc, includeGeometry);
        return resp.getData();
    }

    /**
     * Gets FloodRiskResponse
     * Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param includeZoneDesc Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @return ApiResponse&lt;FloodRiskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FloodRiskResponse> getFloodRiskByLocationWithHttpInfo(String longitude, String latitude, String includeZoneDesc, String includeGeometry) throws ApiException {
        com.squareup.okhttp.Call call = getFloodRiskByLocationCall(longitude, latitude, includeZoneDesc, includeGeometry, null, null);
        Type localVarReturnType = new TypeToken<FloodRiskResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets FloodRiskResponse (asynchronously)
     * Returns the Flood Risk data for Flood Zones and Base Flood Elevation, based on location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param includeZoneDesc Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)
     * @param includeGeometry Y or N (default is N) - if it is Y, then geometry will be part of response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFloodRiskByLocationAsync(String longitude, String latitude, String includeZoneDesc, String includeGeometry, final ApiCallback<FloodRiskResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFloodRiskByLocationCall(longitude, latitude, includeZoneDesc, includeGeometry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FloodRiskResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFloodRiskByLocationBatch */
    private com.squareup.okhttp.Call getFloodRiskByLocationBatchCall(FloodRiskByLocationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        

        // create path and map variables
        String localVarPath = "/georisk/v1/flood/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Batch method for getting flood risk by location
     * Batch method for getting flood risk by location
     * @param body  (optional)
     * @return FloodRiskResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FloodRiskResponseList getFloodRiskByLocationBatch(FloodRiskByLocationRequest body) throws ApiException {
        ApiResponse<FloodRiskResponseList> resp = getFloodRiskByLocationBatchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Batch method for getting flood risk by location
     * Batch method for getting flood risk by location
     * @param body  (optional)
     * @return ApiResponse&lt;FloodRiskResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FloodRiskResponseList> getFloodRiskByLocationBatchWithHttpInfo(FloodRiskByLocationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getFloodRiskByLocationBatchCall(body, null, null);
        Type localVarReturnType = new TypeToken<FloodRiskResponseList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Batch method for getting flood risk by location (asynchronously)
     * Batch method for getting flood risk by location
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFloodRiskByLocationBatchAsync(FloodRiskByLocationRequest body, final ApiCallback<FloodRiskResponseList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFloodRiskByLocationBatchCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FloodRiskResponseList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
